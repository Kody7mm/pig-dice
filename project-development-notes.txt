Objects:
Games
Users
Cumulative Scores
Turn Scores

Key-Value Pairs:
GAME (Address Book)
User: id


USERS (Contact)
Name: userName
Score: cumulativeScore
ID: id

Functions:
addUser -triggered by a submit
roll -triggered by click
hold -triggered by click
score -triggered by hold function execution or by roll === 1
win -triggered by a user cumulativeScore >= 100
newGame -triggered by a click
switchPlayers -triggered by score function execution

function pig(){
    let tempScore;
if (tempScore != 1 && they hold){ 
if (tempScore = 1) {
    return false
}

cumulativeScore = tempScore + this.cumulativeScore
}

Things to dynamically display:
userNames
userScores
rollResult

Things to have on the page upon load:
Form for entering userName
Output divs:
  User1
  User2
  Game(i.e: rollResult, winner)
Buttons:
  Submit userName
  roll
  hold
  new game
  ??switchPlayers??



Specifications:

Describe: Games; 
Test: "It will create an object to serve as a blueprint for creating game instances"
Expect: (new Game()).toEqual(newGame = {users: {â€¦}, currentId: 0})

Test-2: "It will create a prototype to be called on Game objects to add an id property"
Expect: (game.assignId).toEqual(game = {id: 1};)

Describe: User;
Test-1: "It will create an object to serve as a blueprint for creating a user instances"
Expect: (new User(FreddieMercury))toEqual(newPlayer = {Name: "FreddieMercury"; Score = 0;})

Test: "



  Objects ()

  Objects.prototype.addUser